<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Michał Bryłka | Devexcellence</title><link>https://michalbrylka.github.io/</link><description>Michał Bryłka | Devexcellence blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>michal.brylka@gmail.com (Michał Bryłka)</managingEditor><webMaster>michal.brylka@gmail.com (Michał Bryłka)</webMaster><copyright>&amp;copy; Copyright 2019-2022 Michał Bryłka</copyright><lastBuildDate>Wed, 04 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://michalbrylka.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Span binary reader</title><link>https://michalbrylka.github.io/posts/span-binary-reader/</link><pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate><author>Michał Bryłka</author><guid>https://michalbrylka.github.io/posts/span-binary-reader/</guid><description>Span is marvelous way to represent contiguous memory in .NET. What it lacks is convenience in reading/writing using build in functions or dedicated reader/writer. Today I&amp;rsquo;ll try to address the former</description></item><item><title>Commitment driven development</title><link>https://michalbrylka.github.io/posts/commit-driven-development/</link><pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate><author>Michał Bryłka</author><guid>https://michalbrylka.github.io/posts/commit-driven-development/</guid><description>There are multiple ways of planning your source control workflow. Let me introduce a quick tip that may speed your work when dealing with numerous issues during the day.</description></item><item><title>Certificate converter</title><link>https://michalbrylka.github.io/posts/certificate-convert/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><author>Michał Bryłka</author><guid>https://michalbrylka.github.io/posts/certificate-convert/</guid><description>There are times when we need to convert certificate. Tools like OpenSSL are usually the way to go when we control where our certificates are deployed. Sometimes a custom solutions is needed</description></item><item><title>Generic math extended example</title><link>https://michalbrylka.github.io/posts/generic-math-matrix/</link><pubDate>Mon, 05 Dec 2022 00:00:00 +0100</pubDate><author>Michał Bryłka</author><guid>https://michalbrylka.github.io/posts/generic-math-matrix/</guid><description>Generic math feature from C# 11 brings us a lot of flexibility. Besides ubiquitously shared simple generic methods we can also implement whole types. Matrix seems to be a good candidate</description></item><item><title>Static Interface Members</title><link>https://michalbrylka.github.io/posts/static-interface-members/</link><pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate><author>Michał Bryłka</author><guid>https://michalbrylka.github.io/posts/static-interface-members/</guid><description><![CDATA[In case you&rsquo;ve lost last 3 years on C# interface design, you&rsquo;d better catch up before asking classic &ldquo;abstract class vs interface&rdquo; on next job interview. Things have changed. Thankfully, for the better]]></description></item><item><title>Font Awesome Cheatsheet</title><link>https://michalbrylka.github.io/posts/font-awesome-cheatsheet/</link><pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate><author>Michał Bryłka</author><guid>https://michalbrylka.github.io/posts/font-awesome-cheatsheet/</guid><description>This post serves as my notebook for using Font Awesome icons</description></item><item><title>Using Records in legacy .NET Frameworks</title><link>https://michalbrylka.github.io/posts/using-records-in-older-frameworks/</link><pubDate>Thu, 11 Jun 2020 00:18:08 +0200</pubDate><author>Michał Bryłka</author><guid>https://michalbrylka.github.io/posts/using-records-in-older-frameworks/</guid><description>C# 9.0 records can be used in older frameworks. Extend your score on records to &lt;sup>100&lt;/sup>/&lt;sub>100&lt;/sub></description></item></channel></rss>