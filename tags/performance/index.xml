<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>performance - Tag - Michał Bryłka | Devexcellence</title><link>https://michalbrylka.github.io/tags/performance/</link><description>performance - Tag - Michał Bryłka | Devexcellence</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>michal.brylka@gmail.com (Michał Bryłka)</managingEditor><webMaster>michal.brylka@gmail.com (Michał Bryłka)</webMaster><copyright>&amp;copy; Copyright 2019-2022 Michał Bryłka</copyright><lastBuildDate>Wed, 04 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://michalbrylka.github.io/tags/performance/" rel="self" type="application/rss+xml"/><item><title>Span binary reader</title><link>https://michalbrylka.github.io/posts/span-binary-reader/</link><pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate><author>Michał Bryłka</author><guid>https://michalbrylka.github.io/posts/span-binary-reader/</guid><description>Span is marvelous way to represent contiguous memory in .NET. What it lacks is convenience in reading/writing using build in functions or dedicated reader/writer. Today I&amp;rsquo;ll try to address the former</description></item></channel></rss>